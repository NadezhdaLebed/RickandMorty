{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\RickandMorty\\\\src\\\\components\\\\Table\\\\BasicTable.jsx\";\nimport * as React from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst propTypes = {\n  columns: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    label: PropTypes.string\n  })).isRequired,\n  rows: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number\n  })).isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n  page: PropTypes.number.isRequired,\n  handleChangePage: PropTypes.func.isRequired,\n  handleChangeRowsPerPage: PropTypes.func.isRequired\n};\n\nconst BasicTable = props => {\n  const {\n    columns,\n    rows,\n    rowsPerPage,\n    page,\n    handleChangePage,\n    handleChangeRowsPerPage\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      width: '100%',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      sx: {\n        maxHeight: 440\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: 650\n        },\n        \"aria-label\": \"simple table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => {\n              return /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: column.label\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 33,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              '&:last-child td, &:last-child th': {\n                border: 0\n              }\n            },\n            children: columns.map(column => {\n              const value = row[column.id];\n\n              /*#__PURE__*/\n              _jsxDEV(TableCell, {\n                component: \"th\",\n                scope: \"row\",\n                children: value\n              }, column.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 33\n              }, this);\n            })\n          }, row.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [5, 10, 25],\n      component: \"div\",\n      count: rows.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onPageChange: handleChangePage,\n      onRowsPerPageChange: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_c = BasicTable;\nBasicTable.propTypes = propTypes;\nexport default BasicTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicTable\");","map":{"version":3,"sources":["D:/projects/RickandMorty/src/components/Table/BasicTable.jsx"],"names":["React","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","propTypes","columns","PropTypes","arrayOf","shape","id","string","label","isRequired","rows","number","rowsPerPage","page","handleChangePage","func","handleChangeRowsPerPage","BasicTable","props","width","overflow","maxHeight","minWidth","map","column","slice","row","border","value","length"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@material-ui/core';\r\n\r\nconst propTypes = {\r\n    columns: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string,\r\n        label: PropTypes.string,\r\n      }),\r\n    ).isRequired,\r\n    rows: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          id: PropTypes.number,\r\n        }),\r\n    ).isRequired,\r\n    rowsPerPage: PropTypes.number.isRequired,\r\n    page:  PropTypes.number.isRequired,\r\n    handleChangePage: PropTypes.func.isRequired,\r\n    handleChangeRowsPerPage: PropTypes.func.isRequired,\r\n  };\r\n\r\n\r\nconst BasicTable = (props) => {\r\n    const { columns, rows, rowsPerPage, page, handleChangePage, handleChangeRowsPerPage } = props;\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n        <TableContainer sx={{ maxHeight: 440 }}>\r\n            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {columns.map((column) => {\r\n                            return  <TableCell key={column.id} align=\"right\">{column.label}</TableCell>\r\n                        })}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                {rows\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row) => (\r\n                    <TableRow\r\n                    key={row.id}\r\n                    sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                    >\r\n                        {columns.map((column) => {\r\n                            const value = row[column.id];\r\n                                <TableCell component=\"th\" scope=\"row\" key={column.id}>\r\n                                {value}\r\n                            </TableCell>\r\n                        })}\r\n                    </TableRow>\r\n                ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n    />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nBasicTable.propTypes = propTypes;\r\n\r\nexport default BasicTable;"]},"metadata":{},"sourceType":"module"}